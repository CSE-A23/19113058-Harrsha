                                                PART-A

1)
	. (Member Access or Dot operator)
	?: (Ternary or Conditional Operator)
	:: (Scope Resolution Operator)
	.* (Pointer-to-member Operator)
They cant be overloaded because:
i) Scope resolution operator :: can't be overloaded because  - it specifies a class and namespace 
name and it's not available at a class level because it specifies which class you are referring to.

ii) Dot operator and "*" can't be overloaded because they specify access, not an operation . Dot specifies a member of a class,
and star is a pointer resolution operator.

iii) Ternary operator can't be overridden because it isn't an operator. It check the condition of a statement and displays the value assigned if the statement is true ie.
 for an if...then...else statement that returns a value.

2) 

c) Compiler Error in line ” Derived *dp = new Base;

3) 

Multipath Inheritance in C++ is derivation of a class from other derived classes, which are derived from the same base class.
This type of inheritance involves other inheritance like multiple, multilevel, hierarchical.
In multipath inheritance, a derived class has more than one parent class that 
defines property or methods with the same name. Hence there is a conflict.

This can be resolved by
i) The order in which the superclasses or parents are given define which property will be accessible by the 
 name; while the others will remain hidden.
ii) The subclass must resolve the problem by providing a property or method with the name, and by defining how to use the
ones from its parents, resolve the ambiguity with the class and a scope resolution operator.

4) 

A virtual function will become pure virtual function when you append "=0" at the end of declaration of virtual function. 
Pure virtual function doesn't have body or implementation. We must implement all pure virtual functions in derived class.
Pure virtual function is also known as abstract function.
A class with at least one pure virtual function or abstract function is called abstract class. We can't create an objects for any
abstract class. Member functions of abstract class will beautomatically  invoked by derived class object.
A class is made abstract by declaring one or more of its virtual functions to be "pure".
i.e, by adding "= 0" in its declaration.

Syntax:
 virtual void draw () const = 0; 
"= 0" is known as a pure specifier.

5) 

c) catch(…) statement is used to catch all types of exceptions.
A special catch block called 'catch all' catch(...) that can be used to catch all types of exceptions.

 PART - B
6)

#include<iostream>
using namespace std;
class aoperators
 {
public:
char ao;
float n1, n2;
   aoperators()
 {
  this->n1 = 0;
  this->n2 = 0;
 }
aoperators(int x, int y)
{
  this->n1 = x;
  this->n2 = y;
}
friend aoperators operator+(aoperators&, aoperators&);
};
int main()
{
char ao;
float n1, n2;
cout << "Enter operator +, - , *, /: ";
cin >> ao;
cout << "Enter two operands: ";
cin >> n1 >> n2;
switch(ao)
{
case '+':
cout << n1+n2;
break;
case '-':
cout << n1-n2;
break;
default:
cout << "Incorrect operator";
break;
}
return 0;
}

7) 

Function overriding:
If derived class defines same function as defined in its base class, it is known as function overriding in C++.
It is used to achieve runtime polymorphism. It enables you to provide specific implementation of the function which is already
provided by its base class.

Program :
#include<iostream>
using namespace std;
class Sports
{
public:
void players()
{
cout << "This is parent class" << endl; }
};
class Cricket : public Sports {
public:
void players()
{
cout << "Dhoni,Kohli" << endl;
}
};
class Football : public Sports {
public:
void players()
{
cout << "Ronaldo,Messi" << endl;
}
};
class Volleyball : public Sports {
public:
void players()
{
cout << "Gavin Schmitt,Earvin Ngapeth" << endl;
}
};
int main() {
Cricket c;
Football f;
Volleyball v;
c.players();
f.players();
v.players();
return 0;
}

8) Base class constructors are always called in the derived class constructors. 
Order of executions:When you create derived class object, first the base class default constructor is executed and then the derived class's constructor 
finishes execution.

1. Whether derived class's default constructor is called or parameterised is called, base class's default constructor is always
called inside them.

2. To call base class's parameterised constructor inside derived class's parameterised constructor, we must mention it explicitly
while declaring derived class's parameterized constructor.

Program:
class Base
{
int x;
public:
Base(int i)// parameterized constructor
{
x = i;
cout << "Base Parameterized Constructor\n";
}
};
class Derived : public Base {
int y;
public:
// parameterized constructor
Derived(int j):Base(j)
{
y = j;
cout << "Derived Parameterized Constructor\n";
}
};
int main()
{
Derived d(10) ;
}

9)  

Runtime Polymorphism: This is also known as dynamic or late binding.Function overriding is an example of Runtime polymorphism.
Function overriding: When child class declares a method, which is already present in the parent class then this is 
called function overriding, here child class overrides the parent class.

Program:
#include<iostream>
using namespace std;
class A
{
public:
void disp()
{
cout<<"Super Class Function"<<endl;
}
};
class B:
public A
{
public:
void disp()
{
cout<<"Sub Class Function";
}
};
int main()
{
A obj;
obj.disp();
B obj2;
obj2.disp();
return 0;
}

10)

#include<iostream>
using namespace std;
float Division ( float num, float den);
{
return (num / den);
}
int main ()
{
float n = 12.5;
float d= 0;
float answer;
answer = Division (n,d);
cout << "The quotient of 12.5/0 is"<< answer<< endl;
} 

 PART-C
11)

#include<iostream>
using namespace std;
class salary
{
    public:
    long int bp;
    void get()
    {
        cout<<"Enter basic salary\n";       
        cin>>bp;
    }
};
class inputsalary:public salary
{
    public:
    long double is;
    void get()
    {
        salary::get();
        int i;
        float pec;
        cout<<"Enter incremented percentage\n";
        cin>>i;
        pec=(bp*i)/100;
        is=bp+pec;
    }
};
class readsalary:public inputsalary
{
    public:
    long double r;
    long int p;
    void get()
    {
        inputsalary::get();
        cout<<"Enter performance salary\n"; 
        cin>>p;
        r=is+p;
    }
    void print()
    {
        cout<<"Revised salary="<<r<<"\n";
    }
};
int main()
{
    readsalary obj;    
    obj.get();
    obj.print();
}
